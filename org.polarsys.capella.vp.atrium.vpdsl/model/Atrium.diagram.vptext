/******************************************************************************
* Copyright (c) 2006, 2016 Thales Global Services 
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Eclipse Public License v1.0 
 * which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html 
 * 
 * Contributors: 
 *    Thales - initial API and implementation
*****************************************************************************/
Diagrams Atrium.diagram {
	DiagramExtension "Atrium_LogicalExtension" {
		extended-diagram: LogicalArchitectureBlank
		Mapping {
			
			
			Container container_CFA {
				domain-context: Atrium.data.CFA
				provided-by association external emde.ExtensibleElement.ownedExtensions
				Representation {
					Label { content: "CFA here" police: black }
					Style {
						FlatStyle {background: light_chocolate foreground: white }
					}
				}
				Contains {
					

					
								Node node_assumption {
									domain-context: Atrium.data.Assumption provided-by association Atrium.data.CFA.assumption
									Representation {
										Label { content: "Clarification here" police: black alignment: center}
										Style {
											BasicStyle { border-color: black background: light_green form: Dot }
										}
									}
									Representation {
										condition: Java isTask
										Label { content: "Task here" police: black alignment: center}
										Style {
											BasicStyle { border-color: black background: gray form: Dot }
										}
									}
									Representation {
										condition: Java isRisk
										Label { content: "Risk here" police: black alignment: center}
										Style {
											BasicStyle { border-color: black background: red form: Triangle }
										}
									}
									Contains {
										//[Container or  Node]
									}
								}
							
								Node node_DG {
									domain-context: Atrium.data.DG provided-by association Atrium.data.CFA.goal
									Representation {
										Label { content: "Goal here" police: black alignment: center}
										Style {
											BasicStyle { border-color: black background: light_gray form: Square }
										}
									}
									Contains {
										//[Container or  Node]
									}
								}
				
					
				}
			}
			
			
			///Import Capella Element + giving them a condition
			Container ContainerLC {
				import: LABLogicalComponent
				Representation {
					condition: Java isElementNew
					Style {
						FlatStyle {
							background: red 
							foreground: white
						}
					}
				}
			}
			Node NodeLF{
				import: LABLogicalFunction
				Representation {
					condition: Java isElementNewNode
					Style {
							BasicStyle { border-color: black background: light_red form: Square }
					}
				}
			}
			EdgeImport FunctionalExchange {
				import: LABDataFlowbetweenFunction
				Representation {
					condition: Java isElementNewFE
					Style {
						line-style: solid
						end-decorator: NoDecoration
						color: red
					}
				}
			}
			//End import
			
			
			//////////////EDGES BETWEEN CFA AND CAPELLA ELEMENT////////////////////////
			Edge LinkCFA_LC {
				association-context: Atrium.data.CFA.linkedtoElement
				source: container_CFA
				target: ContainerLC 
				Representation {
					Style {
						line-style: dash
						end-decorator: NoDecoration
						color: black
					}
				}
				Representation {
					condition: Java isElementNewEdge
					Style {
						line-style: dash
						end-decorator: NoDecoration
						color: red
					}
				}
			}
			Edge LinkCFA_LF {
				association-context: Atrium.data.CFA.linkedtoElement
				source: container_CFA
				target: NodeLF 
				Representation {
					Style {
						line-style: dash
						end-decorator: NoDecoration
						color: black
					}
				}
				Representation {
					condition: Java isElementNewEdge
					Style {
						line-style: dash
						end-decorator: NoDecoration
						color: red
					}
				}
			}
			Edge LinkCFA_FE {
				association-context: Atrium.data.CFA.linkedtoElement
				source: container_CFA
				target: FunctionalExchange 
				Representation {
					Style {
						line-style: dash
						end-decorator: NoDecoration
						color: black
					}
				}
				Representation {
					condition: Java isElementNewEdge
					Style {
						line-style: dash
						end-decorator: NoDecoration
						color: red
					}
				}
			}
			
			/////////////END EDGES///////////////////////
		}
		
		Actions {
			//ReconnectEdge ReconnectLink { label: "Connect CFA" action-for: LinkCFA_LC }
			OpenAction add_CFA {label: "Add CFA"}
			OpenAction add_assumption {label: "Add Assumption"}
			OpenAction add_DG {label: "Add DG"}
		}
	}
}